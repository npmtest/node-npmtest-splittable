{"/home/travis/build/npmtest/node-npmtest-splittable/test.js":"/* istanbul instrument in package npmtest_splittable */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-splittable/lib.npmtest_splittable.js":"/* istanbul instrument in package npmtest_splittable */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_splittable = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_splittable = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-splittable/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-splittable && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_splittable */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_splittable\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_splittable.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_splittable.rollup.js'] =\n            local.assetsDict['/assets.npmtest_splittable.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_splittable.__dirname + '/lib.npmtest_splittable.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-splittable/node_modules/splittable/index.js":"/*\n * Copyright 2016 Malte Ubl.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = require('./splittable').splittable;\n","/home/travis/build/npmtest/node-npmtest-splittable/node_modules/splittable/splittable.js":"/*\n * Copyright 2016 Malte Ubl.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar ClosureCompiler = require('google-closure-compiler').compiler;\nvar Promise = require('bluebird');\nvar babel = require('babelify');\nvar browserify = require('browserify');\nvar through = require('through2');\nvar devnull = require('dev-null');\nvar relativePath = require('path').relative;\nvar path = require('path');\nvar fs = require('fs');\nvar mkpath = require('mkpath');\nvar findPackageJsonPath = require('find-root');\nconst TopologicalSort = require('topological-sort');\n\n// Override to local closure compiler JAR\nClosureCompiler.JAR_PATH = require.resolve(\n    './third_party/closure-compiler/closure-compiler-1.0-SNAPSHOT.jar');\n\nexports.splittable = function(config) {\n\n  if (!config || !config.modules) {\n    return Promise.reject(\n        new Error('Pass an array of entry modules via modules option. ' +\n            'Example: {modules: [\"./first\", \"./second\"]}'));\n  }\n\n  return exports.getFlags(config).then(function(flagsArray) {\n    return new Promise(function(resolve, reject) {\n      new ClosureCompiler(flagsArray).run(function(exitCode, stdOut, stdErr) {\n        if (exitCode == 0) {\n          resolve({\n            warnings: config.warnings ? stdErr : null,\n          });\n        } else {\n          reject(\n              new Error('Closure compiler compilation of bundles failed.\\n' +\n                  stdOut + '\\n' +\n                  stdErr));\n        }\n      });\n    })\n  });\n};\n\n\nexports.getFlags = function(config) {\n  // Reasonable defaults.\n  var flags = {\n    compilation_level: 'ADVANCED',\n    process_common_js_modules: true,\n    rewrite_polyfills: true,\n    create_source_map: '%outname%.map',\n    parse_inline_source_maps: true,\n    apply_input_source_maps: true,\n    source_map_location_mapping: [\n      'splittable-build/transformed/|/',\n      'splittable-build/browser/|/',\n      '|/',\n    ],\n    new_type_inf: true,\n    language_in: 'ES6',\n    language_out: 'ES5',\n    module_output_path_prefix: config.writeTo || 'out/',\n    externs: path.dirname(module.filename) + '/splittable.extern.js',\n    jscomp_off: [\n      'accessControls',\n      'globalThis',\n      'misplacedTypeAnnotation',\n      'nonStandardJsDocs',\n      'suspiciousCode',\n      'uselessCode',\n    ],\n  };\n\n  // Turn object into deterministically sorted array.\n  var flagsArray = [];\n  Object.keys(flags).sort().forEach(function(flag) {\n    var val = flags[flag];\n    if (val instanceof Array) {\n      val.forEach(function(item) {\n        flagsArray.push('--' + flag, item);\n      })\n    } else {\n      flagsArray.push('--' + flag, val);\n    }\n  });\n\n  return exports.getGraph(config.modules, config).then(function(g) {\n    return flagsArray.concat(\n        exports.getBundleFlags(g, flagsArray));\n  });\n};\n\nexports.getBundleFlags = function(g) {\n  var flagsArray = [];\n\n  // Write all the packages (directories with a package.json) as --js\n  // inputs to the flags. Closure compiler reads the packages to resolve\n  // non-relative module names.\n  var packageCount = 0;\n  Object.keys(g.packages).sort().forEach(function(package) {\n    flagsArray.push('--js', package);\n    packageCount++;\n  });\n  // Build up the weird flag structure that closure compiler calls\n  // modules and we call bundles.\n  var bundleKeys = Object.keys(g.bundles);\n  bundleKeys.sort().forEach(function(name) {\n    var isBase = name == '_base';\n    var extraModules = 0;\n    var bundle = g.bundles[name];\n    if (isBase || bundleKeys.length == 1) {\n      flagsArray.push('--js', relativePath(process.cwd(),\n          require.resolve('./base.js')));\n      extraModules++;\n      Object.keys(g.browserMask).sort().forEach(function(mask) {\n        flagsArray.push('--js', mask);\n        extraModules++;\n      });\n    }\n    // In each bundle, first list JS files that belong into it.\n    bundle.modules.forEach(function(js) {\n      if (g.transformed[js]) {\n        js = g.transformed[js];\n      }\n      flagsArray.push('--js', js);\n    });\n    if (!isBase && bundleKeys.length > 1) {\n      flagsArray.push('--js', bundleTrailModule(bundle.name));\n      extraModules++;\n    }\n    // The packages count as inputs to the first module.\n    if (packageCount) {\n      extraModules += packageCount;\n      packageCount = 0;\n    }\n    // Replace directory separator with - in bundle filename\n    var name = bundle.name\n        .replace(/\\.js$/g, '')\n        .replace(/[\\/\\\\]/g, '-');\n    // And now build --module $name:$numberOfJsFiles:$bundleDeps\n    var cmd = name + ':' + (bundle.modules.length + extraModules);\n    // All non _base bundles depend on _base.\n    if (!isBase && g.bundles._base) {\n      cmd += ':_base';\n    }\n    flagsArray.push('--module', cmd);\n    if (bundleKeys.length > 1) {\n      if (isBase) {\n        flagsArray.push('--module_wrapper', name + ':' +\n            exports.baseBundleWrapper);\n      } else {\n        flagsArray.push('--module_wrapper', name + ':' +\n            exports.bundleWrapper);\n      }\n    } else {\n      flagsArray.push('--module_wrapper', name + ':' +\n            exports.defaultWrapper);\n    }\n  });\n  flagsArray.push('--js_module_root', './splittable-build/transformed/');\n  flagsArray.push('--js_module_root', './splittable-build/browser/');\n  flagsArray.push('--js_module_root', './');\n  return flagsArray;\n}\n\n/**\n * Produces a graph based on the dependencies of the entry modules.\n * @param {!Array<string>} entryModules\n * @return {!Promise<{bundles: !Object}>} A Promise for bundle definitions.\n * @visibleForTesting\n */\nexports.getGraph = function(entryModules, config) {\n  var resolve;\n  var reject;\n  var promise = new Promise(function(res, rej) {\n    resolve = res;\n    reject = rej;\n  });\n  var topo = new TopologicalSort({});\n  var graph = {\n    entryModules: entryModules,\n    // Lookup whether a module is a dep of a given entry module\n    depOf: {},\n    // Map of module id to its deps array.\n    deps: {},\n    // Topological sorted array of all deps.\n    sorted: undefined,\n    // Generated bundles\n    bundles: {\n      // We always have a _base bundle.\n      _base: {\n        isBase: true,\n        name: '_base',\n        // The modules in the bundle.\n        modules: [],\n      },\n    },\n    packages: {},\n    // Map of original to transformed filename.\n    transformed: {},\n    browserMask: {},\n  };\n\n  config.babel = config.babel || {};\n\n  // Use browserify with babel to learn about deps.\n  var b = browserify(entryModules, {\n    debug: true,\n    deps: true,\n    detectGlobals: false,\n  })\n  // We register 2 separate transforms. The initial stage are\n  // transforms that closure compiler does not support.\n  .transform(babel, {\n    babelrc: !!config.babel.babelrc,\n    plugins: config.babel.plugins || [\n      require.resolve(\"babel-plugin-transform-react-jsx\"),\n    ],\n    presets: config.babel.presets,\n  }).\n  // The second stage are transforms that closure compiler supports\n  // directly and which we don't want to apply during deps finding.\n  transform(babel, {\n    babelrc: false,\n    plugins: [\n      require.resolve(\"babel-plugin-transform-es2015-modules-commonjs\"),\n    ]\n  });\n\n  b.on('package', function(pkg) {\n    if (!pkg.browser) {\n      return;\n    }\n    Object.keys(pkg.browser).sort().forEach(function(entry) {\n      if (/^\\./.test(entry)) {\n        throw new Error(\n            'Relative entries in package.json#browser not yet supported: ' +\n            entry + ' [' + pkg.__dirname + '.package.json]');\n      }\n      if (pkg.browser[entry] !== false) {\n        throw new Error(\n            'Only masking of entire modules via false supported in ' +\n            'package.json#browser:' + entry +\n            ' [' + pkg.__dirname + '.package.json]');\n      }\n      var filename =\n          'splittable-build/browser/node_modules/' + entry;\n      var maskedPkg = 'splittable-build/browser/node_modules/' +\n          entry.split('/')[0] + '/package.json';\n      if (!/\\//.test(entry)) {\n        filename += '/index';\n      }\n      filename = exports.maybeAddDotJs(filename);\n      if (graph.browserMask[filename]) {\n        return;\n      }\n      graph.browserMask[filename] = true;\n      mkpath.sync(path.dirname(filename));\n      fs.writeFileSync(filename,\n          '// Generated to mask module via package.json#browser.\\n' +\n          'module.exports = {};\\n');\n      if (graph.browserMask[pkg]) {\n        return;\n      }\n      graph.browserMask[maskedPkg] = true;\n      fs.writeFileSync(maskedPkg,\n          '{\"Generated to mask module via package.json#browser\":true}\\n');\n    });\n  });\n  // TODO: Replace with proper plugin system.\n  var seenTransform = {};\n  b.on('transform', function(tr) {\n    if (tr instanceof babel) {\n      tr.once(\"babelify\", function(result, filename) {\n        if (seenTransform[filename]) {\n          return;  // We only care about the first transform per file.\n        }\n        seenTransform[filename] = true;\n        filename = relativePath(process.cwd(), filename);\n        // Copy transformed code into shadow path. Files in this path\n        // have precedence over regular relative paths.\n        var target = './splittable-build/transformed/' + filename;\n        mkpath.sync(path.dirname(target));\n        fs.writeFileSync(target, result.code);\n        graph.transformed[filename] = target;\n      });\n    }\n  });\n  // This gets us the actual deps. We collect them in an array, so\n  // we can sort them prior to building the dep tree. Otherwise the tree\n  // will not be stable.\n  var depEntries = [];\n  b.pipeline.get('deps').push(through.obj(function(row, enc, next) {\n    row.source = null;  // Release memory\n    depEntries.push(row);\n    next();\n  }));\n\n  b.bundle().on('end', function() {\n    var edges = {};\n    depEntries.sort(function(a, b) {\n      return a.id < b.id;\n    }).forEach(function(row) {\n      var id = unifyPath(exports.maybeAddDotJs(\n          relativePath(process.cwd(), row.id)));\n      topo.addNode(id, id);\n      var deps = edges[id] = Object.keys(row.deps).sort().map(function(dep) {\n        var depId = row.deps[dep];\n        var relPathtoDep = unifyPath(relativePath(process.cwd(), row.deps[dep]));\n\n        // Non relative module path. Find the package.json.\n        if (!/^\\./.test(dep)) {\n          var packageJson = findPackageJson(depId);\n          if (packageJson) {\n            graph.packages[packageJson] = true;\n          }\n        }\n        return relPathtoDep;\n      });\n      graph.deps[id] = deps;\n      if (row.entry) {\n        graph.depOf[id] = {};\n        graph.depOf[id][id] = true;  // Self edge.\n        deps.forEach(function(dep) {\n          graph.depOf[id][dep] = true;\n        });\n      }\n    });\n    Object.keys(edges).sort().forEach(function(id) {\n      edges[id].forEach(function(dep) {\n        topo.addEdge(id, dep);\n      })\n    });\n    graph.sorted = Array.from(topo.sort().keys()).reverse();\n\n    setupBundles(graph);\n\n    resolve(graph);\n  }).on('error', reject).pipe(devnull());\n  return promise;\n}\n\nfunction setupBundles(graph) {\n  // For each module, mark them as to whether any of the entry\n  // modules depends on them (transitively).\n  Array.from(graph.sorted).reverse().forEach(function(id) {\n    graph.deps[id].forEach(function(dep) {\n      Object.keys(graph.depOf).sort().forEach(function(entry) {\n        if (graph.depOf[entry][id]) {\n          graph.depOf[entry][dep] = true;\n        }\n      });\n    });\n  });\n\n  // Create the bundles.\n  graph.sorted.forEach(function(id) {\n    var inBundleCount = 0;\n    // The bundle a module should go into.\n    var dest;\n    // Count in how many bundles a modules wants to be.\n    Object.keys(graph.depOf).sort().forEach(function(entry) {\n      if (graph.depOf[entry][id]) {\n        inBundleCount++;\n        dest = entry;\n      }\n    })\n    console.assert(inBundleCount >= 1,\n        'Should be in at least 1 bundle', id, 'Bundle count',\n        inBundleCount, graph.depOf);\n    // If a module is in more than 1 bundle, it must go into _base.\n    if (inBundleCount > 1) {\n      dest = '_base';\n    }\n    if (!graph.bundles[dest]) {\n      graph.bundles[dest] = {\n        isBase: false,\n        name: dest,\n        modules: [],\n      };\n    }\n    graph.bundles[dest].modules.push(id);\n  });\n\n  // No need for a base module if there was only one entry module.\n  if (graph.entryModules.length == 1) {\n    delete graph.bundles._base;\n  }\n}\n\nvar knownExtensions = {\n  js: true,\n  es: true,\n  es6: true,\n  json: true,\n};\n\nexports.maybeAddDotJs = function(id) {\n  var extensionMatch = id.match(/\\.([a-zA-Z0-9]+)$/);\n  var extension = extensionMatch ? extensionMatch[1].toLowerCase() : null;\n  if (!knownExtensions[extension]) {\n    id += '.js'\n  }\n  return id;\n}\n\nfunction bundleTrailModule(name) {\n  if (!fs.existsSync('./splittable-build')) {\n    fs.mkdirSync('./splittable-build');\n  }\n  var tmp = require('tmp').fileSync({\n    template: './splittable-build/tmp-XXXXXX.js'\n  });\n\n  var js = '// Generated code to get module ' + name + '\\n' +\n      '(self[\"_S\"]=self[\"_S\"]||[])[\"//' + name + '\"]=' +\n      'require(\"' + relativePath(path.dirname(tmp.name), name) + '\")\\n';\n  fs.writeFileSync(tmp.name, js, 'utf8');\n  return relativePath(process.cwd(), tmp.name);\n}\n\nfunction unifyPath(id) {\n  return id.split(path.sep).join('/');\n}\n\n/**\n * Given a module path, return the path to the relevant package.json or\n * null. Returns null if the module is not inside a node_modules directory.\n * @return {?string}\n */\nfunction findPackageJson(modulePath) {\n  if (modulePath.split(path.sep).indexOf('node_modules') == -1) {\n    return null;\n  }\n  return relativePath(process.cwd(),\n      findPackageJsonPath(modulePath) + '/package.json');\n}\n\nvar systemImport =\n    // Polyfill and/or monkey patch System.import.\n    '(self.System=self.System||{}).import=function(n){' +\n    // Always end names in .js\n    'n=n.replace(/\\\\.js$/g,\"\")+\".js\";' +\n    // Short circuit if the bundle is already loaded.\n    'return (self._S[\"//\"+n]&&Promise.resolve(self._S[\"//\"+n]))' +\n    // Short circuit if we are already loadind, otherwise create\n    // a promise (that will short circuit subsequent requests)\n    // and start loading.\n    '||self._S[n]||(self._S[n]=new Promise(function(r,t){' +\n    // Load via a script\n    'var s=document.createElement(\"script\");' +\n    // Calculate the source URL using the same algorithms as used\n    // during bundle generation.\n    's.src=(self.System.baseURL||\".\")+\"/\"+n.replace(/[\\\\/\\\\\\\\]/g,\"-\");' +\n    // Fail promise on any error.\n    's.onerror=t;' +\n    // On success the trailing module in every bundle will have created\n    // the _S global representing the module object that is the root\n    // of the bundle. Resolve the promise with it.\n    's.onload=function(){r(self._S[\"//\"+n])};' +\n    // Append the script tag.\n    '(document.head||document.documentElement).appendChild(s);' +\n    '})' +\n    ')};\\n';\n\nvar nodeEmulation = 'self.global=self;';\n\nexports.defaultWrapper = nodeEmulation + '%s\\n' +\n     '//# sourceMappingURL=%basename%.map\\n';\n\n// Don't wrap the bundle itself in a closure (other bundles need\n// to be able to see it), but add a little async executor for\n// scheduled functions.\nexports.baseBundleWrapper =\n    // Declaring a few variables that are used in node modules to increase\n    // compatiblity.\n    nodeEmulation +\n    '%s\\n' +\n    systemImport +\n    // Runs scheduled non-base bundles in the _S array and overrides\n    // .push to immediately execute incoming bundles.\n    '(self._S=self._S||[]).push=function(f){f.call(self)};' +\n    '(function(f){while(f=self._S.shift()){f.call(self)}})();\\n' +\n    '//# sourceMappingURL=%basename%.map\\n';\n\n// Schedule or execute bundle via _S global.\nexports.bundleWrapper =\n    '(self._S=self._S||[]).push((function(){%s}));\\n' +\n    '//# sourceMappingURL=%basename%.map\\n';\n","/home/travis/build/npmtest/node-npmtest-splittable/node_modules/splittable/base.js":"/*\n * Copyright 2016 Malte Ubl.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is included as the first file in every splittable build.\n\n/** @const {!Object}  */\nvar process = {};\n\nprocess.env = {};\n\nprocess.env.NODE_ENV = 'production';\n\n// TODO: Move System.import implementation here.\n","/home/travis/build/npmtest/node-npmtest-splittable/node_modules/splittable/splittable.extern.js":"var System = {};\n/**\n * @param {string} module\n * @return {!Promise}\n */\nSystem.import = function(module) {};\n\n/**\n * @type {!Window}\n */\nwindow.global;\n"}